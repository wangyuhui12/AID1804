python调试器　pdb模块

pdb是个模块，主要用于调试程序

作用：
    １、让程序单步执行，并跟踪程序的执行流程
    ２、在运行查看变量的值
    ３、让程序控制

方法：
pdb.set_trace() 在此代码进入调试器

pdb调式命令：
q/quit  退出pdb调试器
l/list  列出源码
h/help  查看pdb帮助
p/pp 表达式    运行表达式并返回结果
n/next      执行下一条语句
c/cont/continue     继续执行，直到下一个断电
b/break     断电位置　   设置断点
cl/clear    断电号　    清除断点
s/step      进入到函数内部执行
r/return    持续运行，直到此函数返回
w/where     打印函数调用栈
run [命令行参数]     重新开始运行程序

assert 语句（断句语句）
语法：
    assert 真值表达式，错误数据（通常是字符串）
作用：
    当真值表达式为False时，用错误数据创建一个AssertionError类型的错误，抛出后进入异常状态
等同于：
    if 真值表达式　＝＝　False:
        raise AssertionError(错误数据)

迭代器　Iterator 和　生成器　Generator

什么是迭代器：
    迭代器是指能用next(it)函数取值的对象（实例）

说明：
    用iter函数可返回一个可迭代对象的迭代器
    迭代器是访问可迭代对象的一种　方式
    迭代器只能往前，不会后退

例如：
L = [1, 1, 2, 3, 5, 8]
it = iter(L)
next(it)    # 1
next(it)    # 1
next(it)    # 2
next(it)    # 3
next(it)    # 5
next(it)    # 8
next(it)    # StopIteration　异常
实例２：见iterator.py

函数：
iter(x)  从一个对象x中返回一个迭代器，x必须是能提供一个迭代器的对象
next(x)
从迭代器it中获取下一个记录，如果无法获取下一条记录则触发StopIteration异常

生成器　Generator(Python2.5及之后的版本才有)
    生成器是能够提供迭代器的对象（实例）

生成器函数
    含有yield语句的函数是生成器函数
    注：yield 翻译　为（产生或生成）

yield　语句
语法:
    yield 表达式
说明：
    yield 用于def 函数中，目的是将此函数作为生成器函数使用
    yield　用来生成数据，供迭代器next(it)函数使用
实例见： yield.py

说明：
    生成器函数的调用将返回一个生成器对象，生成器对象是可迭代对象
    在生成器函数内调用return会产生一个StopIteration异常

生成器表达式：
语法：
    (表达式　for 变量　in 可迭代对象　[if 真值表达式])

注：if 字句可以省略
作用：
    用推导式形式生成一个新的生成器（可迭代对象）

迭代工具函数：
    作用是生成一个个性化的可迭代对象

zip(iter1[, iter2[,..]])    
返回一个zip对象，此对象用于生成一个元组，此元组的个数由最小的可迭代对象决定
示例：见zip.py

enumerate(iterable[, start])
生成带索引的迭代器，返回的迭代类型为索引-值对（index-value)对，默认索引从零开始，也可以用start指定
示例：见enumerate.py

for i in range(2,n):
    if n%i == 0:
        break
else:
    yield n

for循环中，如果没有从任何一个break中退出，则会执行和for对应的else


文件
什么是文件
    文件是用于数据存储的单位，通常用于长期存储数据

Unix/Linux下文件可分为普通文件和设备文件
普通文件是由文件名和文件中的数据两部分组成的

文件的打开和关闭
    文件需要在使用时先打开才能读写
    在不需要读写文件时，应及时关闭文件以释放系统资源
    任何操作系统，打开的文件数有最大限制

打开文件的函数：
    open(file, mode='r')
    用于打开一个文件，返回此文件的操作对象，如果打开失败则会触发错误，抛出异常

文件关闭的方法：
F.close()   # 关闭文件，释放系统资源

#文本文件的常用方法：
F.readline()    读取一行数据，如果到达文件尾则返回空行
F.readlines(n)  返回每行字符串的列表，n代表最大行数
F.writelines(lines)     写入字符中的列表

F.flush()       把写入文件对象的缓存内容写入到磁盘


python3 -m pdb read_phone.py    
#进入调式状态

模式字符串的含义：
    'r'     以只读方式打开文件（默认）
    'w'     以只写方式打开文件，删除原有文件内容（如果文件不存在，则创建该文件并以只写方式打开文件）
    'x'     创建一个新文件，并以写模式打开文件，如果文件存在，则会产生FileExistsError错误
    'a'　    以追加写方式打开一个文件，如果有原文件则追加到原文件末尾
    'b'     用二进制模式打开
    't'     用文本文件模式打开（默认）
    '+'     为更新内容打开一个磁盘文件（可读可写）
注：缺省模式是'rt'



实例方法：
语法：
class 类名（继承列表）：
    def 实例方法名（self, 形式参数1, 形式参数2，...):
        "文档字符串"
        语句....

说明：
    实例方法实质是函数，是定义在类内的函数
    实例方法属于类的属性
    实例方法的第一个参数代表调用这个实例方法的对象，一般命名为"self"
    实例方法如果没有return语句，则返回None

实例方法的调用语法：
    实例.实例方法名（调用参数）
    或
    类名.实例方法名（实例，调用函数）

练习：
自己定义一个类Human(人类)
    有两个属性：
        姓名(name)
        年龄(age)
    有三个方法：
        设置姓名(setName)   # 添加和修改姓名
        设置年龄(setAge)    # ....
        显示信息(infos)     # 显示人的信息

用此来创建　两个对象：
    张三，　２０岁
    李四，　２１岁
    调用方法设置和显示信息

构造方法：
作用：
    创建对象时初始化实例变量
语法：
    def __init__(self[, 参数列表]):
        语句...
说明：
    １．构造　方法名必须为__init__不可改变
    ２．在一个类中只能有一个__init__构造方法(有多个时，最后一个起作用)
    ３．构造方法会在实例创建时自动调用，且将实例自身通过第一个参数self传入__init__方法
    ４．构造方法如果没有return语句，则返回self自身


析构方法：
    class 类名：
        __del__(self):
            pass

析构方法会在对象销毁时被自动调用
python语言不建议在对象销毁时做任何事情，因为此方法的调用时间难以确定

预置实例属性：

__dict__属性
    每一个对象（实例）都有一个__dict__属性
    __dict__属性绑定一个存储此实例自身属性的字典

__doc__属性
    用于保存类的文档字符串，用于help()中显示
    实例的文档字符串和类的文档字符串相同

__class__属性
__class__属性绑定创建此对象（实例）的类对象（类实例）

作用：
    1.可以借助于此属性来创建同类的实例
    2.可以借助于此属性来访问类变量

__module__属性
绑定此实例所属的模块
在主模块中，此值为'__main__'
不在主模块中，此值为模块名

类变量
    １、是指在类class内定义的　变量，此变量属于类，不属于此类的对象（实例）
＼   ２、类变量，可以通过该类直接使用
    ３．类变量，可以通过此类的实例直接访问
    ４．类变量可以通过此类的对象的__class__属性间接访问

例如：
class Human:
    home = "地球"
    def __init__(self, name):
        self.name = name

print(Human.home ) # 地球
h1 = Human("张三")
print(h1.home)　　　#　访问类对象
h1.home = "火星"  # 为此对象添加了实例属性
print(h1.home)　　# 火星　访问实例属性
print(Human.home)　　# 访问类属性

filter()把传入的函数一次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。

类的 __slots__属性
作用：
    １、限定一个类创建的实例只能有固定的实例属性，不允许对象添加列表以外的实例属性
    ２、防止用户因错写属性名称而发生程序错误

说明：
    __slots__属性是一个列表，列表的值是字符串
    含有__slots__属性的类所创建的实例对象没有__dict__属性，即此实例不用字典来存储属性。

实例见：slots.py

id()函数
　id(obj)　　返回对象的标识(identity)


运算符重载
    什么是运算符重载：
        用自定义的规则实现实例之间的运算符操作或函数操作
    作用：
        １、让实例像数学表达式一样的进行运算操作
        ２、让实例像内建对象一样进行内建函数操作
        ３、让程序简洁易读

对象转字符串函数重载
    repr(obj)
    str(obj)

对象转字符串函数重载方法：
    repr()  函数的重载方法：
        def __repr__(self):
            ...
    str() 函数的重载方法：
        def __str__(self):
            ...
    注意：如果对象没有__str__方法，则用repr(obj)函数的结果代替
示例见：mynumber.py

算术运算符的重载：
    +       __add__
    -       __sub__
    *       __mul__
    /       __truediv__
    //      __floordiv___
    %       __mod__
    **      __pow__

二元运算符重载的格式：
def __***__(self, other):
    ...
注：二元运算符的重载方法的参数列表中只能有两个参数

重载说明：
    运算符重载方法的参数已经有固定的含义，不可改变原有意义
    除__call__方法外，其它重载方法的参数个数不可改变

反向算术运算符重载：
    __radd__(self, lhs)   # 加法　lhs + self

一元运算符的重载：
    __neg__  -(负号)
    __pos__  +(正号)
    __invert__ ～(取反)

重载方法：
    def __×××__(self):
        ...

比较运算符的重载：
    __lt__   < 小于
    __le__   <=
    __gt__   >
    __ge__   >=
    __eq__   ==
    __ne__   !=

比较运算的通常用于返回True和False

位运算符重载：
　__invert__ ~　取反
 __and__    & 位与
 __or__     | 位或
 __xor__    ^ 位异或
 __lshift__ << 左移
 __rshift__　>> 右移

内建函数的重载：
　__abs__        abs(obj)  函数调用
　__len__        len(obj) 
　__reversed__   reversed(obj)
 __round__      round(obj)


__iter__  
 作用：使一个类能用for...in循环遍历

示例：
def __iter__(self):
    return self

__getitem__
 作用：使一个类能像list那样按照下标取出元素。
 示例：
class Fib(object):
    def __getitem__(self, n):
        a, b = 1, 1
        for x in range(n):
            a, b = b, a + b
        return a

__call__()
 作用：任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用。
 示例：
 class Student():
    def __init__(self, name):
        self.name = name

    def __call__(self):
        print("My name is %s."　% self.name)

调用方式：

>>> s = Student('Michael')
>>> s()     # self 参数不要传入
My name is Michael.