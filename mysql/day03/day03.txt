

索引 (Index)
 定义：
    对数据库中表的一列或者多列的值进行排序的一种结构
    (mysql中索引用BTREE方式)
　索引的优点
    可以加快数据的检索速度
　缺点
    １、当对表中的速度进行增加、删除和修改的时候，索引需要动态维护，降低了数据的维护速度
    ２、索引需要占用物理空间　　　

索引示例：
　１、开启运行时间检测
    show variables like "%pro%";
    set profiling=1
　２、执行查询语句
    select name from t1 where name="luvy1009999";
　３、查看执行时间
    show profiles;
　４、在name字段创建索引
    create index index_name on t1(name);
　５、执行查询语句
    select name from t1 where name="lucy1009998";
　６、查看执行时间 
    show profiles;   

索引类型
　１、普通索引(index)
    使用规则：
        １、一张表中可以多个index字段
        ２、字段的值可以重复，而且可以为null
        ３、经常把做查询条件的字段设置为index字段
        ４、index字段的key标志为 MUL
    创建index:
        １、创建表        
          ...  index(字段名), index(字段名);
        ２、在已有表中创建索引
         create index 索引名　on 表名(字段名);
         create index age on t1(age);
        ３、查看索引
            desc 表名; (MUL)
            show index from 表名;
            show index from t1\G;
        ４、删除索引
            drop index 索引名 on 表名;
        ###　删除普通索引只能一个一个删                        


示例：          
mysql> create table t1(
    -> id int,
    -> name varchar(20),
    -> age tinyint,
    -> index(id),index(name)
    -> );


　２、唯一索引(unique)  
    使用规则：
    　１、一个表中可以有多个unique字段
    　２、对应字段的值不允许重复，但可以为null
    　３、key 标志：　UNI   
    创建
    　１、创建表
        ...　unique(字段名), unique(字段名);
        示例：　... unique(phnumber), unique(cardnumber);       
     ２、已有表中创建索引
        create unique index 索引名 on 表名(字段名);
    　３、查看/删除(同index)
        drop index 索引名　on 表名;
　３、主键索引(primary key)
    &&
    自增长属性(auto_increment)配合主键一起使用
    使用规则：
        １、一个表中只能有一个主键字段
        ２、对应字段值不允许重复，且不能为null
        ３、key 标志:　PRI
        ４、把表中能够唯一标识一条记录的字段设置为主键，通常把记录编号的字段设置为主键
    创建主键索引：
        １、在创建表创建主键字段
            .... id int primary key auto_increment,
            ... ...);
示例：
create table t3(
id int primary key auto_increment,
name varchar(20),
age tinyint
)auto_increment=100;

            ... id int auto_increment, 
            ... primary key(id);
        ２、在已有表中创建主键
            alter table 表名 add primary key(字段名);
        ３、删除主键
         １、删除 auto_increment 属性
            alter table 表名 modify 字段名 ;
        　２、删除主键
            alter table 表名 drop primary key;       
        ４、在已有表中添加自增长属性并指定起始值
        　　１、添加自增长属性
            alter table 表名　modify id int
            auto_increment

　４、外键索引(foreign key)
　定义：
    让当前表的字段值在另一个表的范围内选择
　语法格式：
    foreign key(参考字段名)    
    references 被参考表名(被参考字段名)
    on delete 级联动作
    on update 级联动作

级联动作：
    １、casecade: 数据级联更新
        当主表删除记录或更新被参考字段值时，从表级联更新

    ２、restrict(默认):
        当主表删除记录或更改被参考字段值时，从表中有相关联记录则不允许主表操作

    ３、set null
        当主表删除记录或更改被参考字段值时，从表中相关联记录的字段值设置为 null

    ４、　no action(同 restrict)　
        都是立即检查外键限制                


删除外键限制
 alter table 表名　drop foreign key 外键名;
 外键名查看方式：show create table 表名;

在已有表中添加外键限制
　alter table 表名　add 
 foreign key(..) references 表名(字段名) 
 on delete 级联动作 ;
 on cascade 级联动作;

 使用规则：
    １、两张表参考字段和被参考字段数据类型要一致
    ２、被参考字段必须为key的一种，通常primary key


示例：
　表1: 缴费信息表(财务)    
　学号     姓名      班级      金额
　1       唐伯虎     二班     ２００
２　　　　　　　秋香       二班     ３００    


mysql> select * from jftab;
+----+-----------+-------+-------+
| id | name      | class | money |
+----+-----------+-------+-------+
|  1 | 唐伯虎    | AID04 |   200 |
|  2 | 点秋香    | AID04 |   300 |
|  3 | 祝枝山    | AID04 |   500 |
+----+-----------+-------+-------+
3 rows in set (0.00 sec)

表１：
create table jftab(
id int primary key,
name varchar(20),
class varchar(7),
money int) character set utf8;


mysql> select * from bjtab;
+--------+-----------+-------+
| stu_id | name      | money |
+--------+-----------+-------+
|      1 | 唐伯虎    |   200 |
|      6 | 点秋香    |   300 |
+--------+-----------+-------+
2 rows in set (0.00 sec)


表２：
create table bjtab(
stu_id int,
name varchar(20),
money int,
foreign key(stu_id) references jftab(id) 
on delete cascade 
on update cascade)character set utf8;


数据导入
　１、作用：把文件系统的内容导入到数据库中
　２、语法格式
    load data infile '文件名'
    into table 表名
    fields terminated by "分隔符"
    lines terminated by "\n"

示例：
　把 /etc/passwd 文件中的内容导入到 db3下的userinfo 表    
 tarena  :  x  : 1000   : 1000  :
 用户名　　　　　　密码　　uid      gid

 tarena,, :  /home/tarena  : /bin/bash
 用户描述　　　　　　主目录          登录权限

操作步骤
　１、在数据库中创建对象的表
create table useinfo(
username varchar(20),
password char(1),
uid int,
gid int,
comment varchar(50),
homedir varchar(50),
shell varchar(50)
)character set utf8;
　２、要导入的文件拷贝到数据库的搜索路径中
    １、查看数据库搜索路径
     show variables like "secure_file_priv";
     sudo cp /etc/passwd /var/lib/mysql-files/
　３、执行数据导入语句 
表格是以','为分隔符
load data infile "/var/lib/mysql-files/passwd"
into table useinfo
fields terminated by ":"
lines terminated by "\n";


练习
将AID1709导入到数据库中

１、创建表
create table aid1709(
id int,
name varchar(20),
score florat(5,2),
phone bigint,
class char(7)
)character set utf8;

２、拷贝文件
sudo cp ~/AID1709.csv /var/lib/mysql-files/

３、执行数据导入语句
load data infile
"/var/lib/mysql-files/AID1709.csv"
into table aid1709
fields terminated by ","
lines terminated by "\n";

数据导出
　１、作用：
    将数据库中表记录保存到系统文件里
　２、语法格式
    select .. from 表名
    into outfile "文件名"  ### 使用绝对路径
    fields terminated "分隔符"
    lines terminated by "\n";

注意：
    １、导出的内容有SQL查询语句决定
    ２、执行导出命令时路径必须指定对应的数据库目录下
    #### chmod  7777  文件名
    #### chmod  +rw   文件名

    alter table 表名 rename 新表名

表的复制
　格式：
    create table 表名 select ... from 表名;

示例：
    create table aid1709 select * from classtab;    

只复制表结构
 create table 表名　select * from 表名 where false;

嵌套查询(子查询)
 定义：把内层的查询结果作为外层查询的条件
 语法：
 　SQL查询语句　where 条件(SQL查询语句)

 示例：
　把uid的值小于这个平均值的用户名和uid号显示出来
　　　１、先求出uid的平均值
    select avg(uid) from userinfo;

　　　２、select username, uid from userinfo
    where uid<(select avg(uid) from userinfo);

练习：
 找出每个国家攻击力最高的英雄的名字和攻击值
 select name, gongji from sanguo
 where 
 gongji in(select max(gongji) from sanguo group by country);


 Day03作业：
综述：两张表，一张顾客信息表customers，一张订单表orders
1、创建一张顾客信息表customers，字段要求如下：
    c_id 类型为整型，设置为主键，并设置为自增长属性
    c_name 字符类型，变长，宽度为20
    c_age 微小整型，取值范围为0~255(无符号)
    c_sex 枚举类型，要求只能在('M','F')中选择一个值
    c_city 字符类型，变长，宽度为20
    c_salary 浮点类型，要求整数部分最大为10位，小数部分为2位

mysql> create table customers(
    -> c_id int primary key auto_increment,
    -> c_name varchar(20),
    -> c_age  tinyint unsigned,
    -> c_sex enum("M","F"),
    -> c_city varchar(20),
    -> c_salary decimal(12,2)
    -> );
   
mysql> insert into customers 
    -> values(1,"Zhangsan",21,'M',"Beijing",18700),
    -> (null,"Lisi",19,"F","Shanghai",12000),
    -> (null,"Wangwu",20,"M","Hangzhou",19000);

    在表中任意插入3条记录,c_name为"Zhangsan","Lisi","Wangwu", c_city尽量 写"Beijing","Shanghai" ......

2、创建一张订单表orders，字段要求如下：
    o_id 整型
    o_name 字符类型，变长，宽度为30
    o_price 浮点类型，整数最大为10位，小数部分为2位
    设置此表中的o_id字段为customers表中c_id字段的外键,更新删除同步
    在表中任意插入5条记录(注意外键限制)

create table orders(
o_id int,
o_name varchar(30),
o_price decimal(12,2),
foreign key(o_id) references customers(c_id)
on delete cascade
on update cascade)character set utf8;

    o_name分别为"iphone","ipad","iwatch","mate9","r11",其他信息自己定
insert into orders values
(1, "iphone",13000),
(1,"ipad",12000),
(2,"iwatch",11000),
(3,"mate9",12000),(2,"r11",10000);

3、返回customers表中，工资大于4000元，或者年龄小于29岁，满足这样条件的前2条记录
    
select * from customers 
where 
c_salary > 4000 and c_age < 29
limit 2;

4、把customers表中，年龄大于等于25岁，并且地址是北京或者上海，这样的人的工资上调15%
select c_id,c_name,c_age,c_sex,c_city,c_salary*(1+0.15) from customers where c_age >= 20 and c_city in("Beijing","Shanghai");            

5、把customers表中，城市为北京的顾客，按照工资降序排列，并且只返回结果中的第一条记录
select * from customers 
where c_city='Beijing'
order by c_salary 
limit 1;
            
6、选择工资salary最少的顾客的信息
select * from customers 
order by c_salary
limit 1;
                
7、找到工资大于5000的顾客都买过哪些产品的记录明细
select * from orders 
where o_id in (select c_id from customers where c_salary > 5000);
                
8、删除外键限制
外键没有auto_increment属性，所有可以直接删除
alter table orders drop foreign key orders_ibfk_1;

                
9、删除customers主键限制
alter table customers modify c_id int;
alter table customers drop primary key;
