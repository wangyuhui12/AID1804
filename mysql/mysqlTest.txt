
select distinct l1.Num as ConsecutiveNums from Logs l1
join Logs l2 on l1.Id=l2.Id-1
join Logs l3 on l2.Id=l3.Id-1
where L1.Num=L2.Num
and L2.Num=L3.Num;

mysql> select * from Scores;
+------+-------+
| Id   | Score |
+------+-------+
|    1 |  3.50 |
|    2 |  3.65 |
|    3 |  4.00 |
|    4 |  3.85 |
|    5 |  4.00 |
|    6 |  3.65 |
+------+-------+
6 rows in set (0.00 sec)

mysql> select l1.Score,l2.Score,l3.Score from Scores l1
    -> join Scores l2 on l1.Id=l2.Id-1
    -> join Scores l3 on l2.Id=l3.Id-1;
+-------+-------+-------+
| Score | Score | Score |
+-------+-------+-------+
|  3.50 |  3.65 |  4.00 |
|  3.65 |  4.00 |  3.85 |
|  4.00 |  3.85 |  4.00 |
|  3.85 |  4.00 |  3.65 |
+-------+-------+-------+

*******************************************

表1: Person

+-------------+---------+
| 列名         | 类型     |
+-------------+---------+
| PersonId    | int     |
| FirstName   | varchar |
| LastName    | varchar |
+-------------+---------+
PersonId 是上表主键
表2: Address

+-------------+---------+
| 列名         | 类型    |
+-------------+---------+
| AddressId   | int     |
| PersonId    | int     |
| City        | varchar |
| State       | varchar |
+-------------+---------+
AddressId 是上表主键
 

编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：

 

FirstName, LastName, City, State
select Person.FirstName,Person.LastName,Address.City,Address.State from Person
left join Address
on Person.PersonId = Address.PersonId;

***************************************************
编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。

+----+--------+
| Id | Salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。

+---------------------+
| SecondHighestSalary |
+---------------------+
| 200                 |
+---------------------+

************************************************

编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
例如，根据上述给定的 Scores 表，你的查询应该返回（按分数从高到低排列）：

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+
select Score, (select count(distinct Score) from Scores where Score >= s.Score) as rank from Scores as s 
order by Score desc;
