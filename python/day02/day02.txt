
day01回顾
基本输入输出
    input("提示")
    print(对象１，对象２，　... sep=' ', end='\n')

if 语句(条件语句，分支语句)
if ×××:
    pass
else:
    pass

if ×××:
    pass
elif ×××:
    pass        # 其中一个条件满足，if语句结束
elif ×××:
    pass
else:
    pass

布尔运算：
 not(非)    and(与)　假     or(或)　　真      
 返回一个对象。不是真假值(False  True)


 ()能提高运算符的优先级

 一元运算符
    + (正号)
    - (负号)

条件表达式
　　1+2 if 5 > 6 esle 4+5     if 为真返回当前值，否则返回else后面的值

pass语句　填充语法空白

pow函数　　　pow(a,b,c) 函数式编程方便
隐式换行　　　()  {}   [] list



day02笔记

字符串　str
 作用：
    用来记录文本（文字）信息
　字符串的表示方法
    在非注释中，凡是用引号括起来的部分都是字符串
    ‘　      单引号
    "       双引号
    '''     三单引号
    """     三双引号

空字符串字面值表示方式：
    ''
    ""
    ''''''
    """"""
非空字符串的字面值表示方式
    'hello'
    "hello"
    '''hello'''
    """hello"""
单引号和双引号的区别：
    单引号内的双引号不算结束符
    双引号内地单引号不算结束符
三引号字符串：
    作用：
        三引号字符串的换行会自动转换为换行符'\n'
        三引号内可以包含单引号和双引号
    如何表示：
        'welcom to beijing\nI like Python!\nI am studing!'
        s = '''welcome to beijing 
        I like python!
        I am studing!'''

用转义序列代表特殊字符
　字符串字面值中，用字符反斜杠(\)后跟一些字符代表一个字符

字符串中的转移字符表
    \'    　     单引号
    \"          双引号
    \\          代表一个反斜杠
    \n          换行
    \r          返回光标至行首
    \f          换页
    \t          水平制表符
    \v          垂直制表符
    \b          倒退  backspace
    \0　         空字符，字符值为０
    \0oo        oo为两位八进制表示的字符
    \xXX        XX为两位十六进制表示的字符
    \uXXXX      Unicode16的十六进制表示的字符
    \UXXXXXXXX　 Unicode32的十六进制表示的字符

ASCII编码：
    ASCII字符表
    $ man ascii

常用ASCII编码：
字符      十进制　　       十六进制
'0'       48            0x30
'A'       65            0x41
'a'       97            0x61


raw 字符串（原始字符串）
　字面值格式：
    r'字符串内容'
    r"字符串内容""
    r'''字符串内容'''
    r"""字符串内容"""
 作用：
    让转义字符\无效
　示例：
    a = 'C:\newfile\test.py'
    print(a)
    print(len(a))   #　得到字符串的长度
    a = r'C:\newfile\test.py'
    print(a)
    print(len(a))

字符串的运算：
　算术运算符：
    + += * *=

 + 加号运算符用于字符串的拼接
 例如：
    x = 'abcd' + 'efg'
    print(x)  # abcdefg
    x += '123'
    print(x) # abcdefg123

 *　运算符用于生成重复的字符串

 练习:
 　写一个程序，打印一个高度为４的矩形方框
 要求输入一个整数，此整数代表矩形的宽度，输出此矩形
 如：
    请输入宽度：１０
    打印如下
    ##########
    #        #
    #        #
    ##########

字符串的比较运算
 运算符：
    > >= < <= == !=
 示例：
    'A' < 'B'  #　True
    'B' < 'a'  # True
    'ABC'<'AB' # False

in / not in 运算符
　作用：
    in　用于序列、字典、集合中，用于判断某个值是否存在于容器中，如果存在则返回True，否则返回False
　格式：
    对象in容器
　示例：
    s = 'welcome to tarena!'
    'to' in s  # True

字符串的索引操作
　python 字符串str是不可以改变的字符序列

　索引语法
    字符串[整数表达式]
　说明
    1、python序列都可以用索引(index)来访问序列中的对象（元素）
    ２、python序列的正向索引是从０开始的，第二个索引为１，最后一个索引为len(s)-1
　　　　３、python序列的反向索引是从-1开始的，-1代表最后一个，-2代表倒数第二个，第一个是-len(s)

 示例：
    s = 'ABCDE'
    print(s[0])     #'A'
    print(s[1])     #'B'

切片　slice
　从字符串序列中取出相应的元素重新组成一个字符串序列
　语法：
    s[(开始索引b):(结束索引e)(:(步长s))]
    注：小括号()括起的部分代表可以省略
　语法说明：
    开始索引是切片开始切下的位置0代表第一个；
    结束索引是切片的终止索引(但不包含终止点)
    步长是切片每次获取完当前元素后移动的方向和偏移量
    　１）没有步长，相当于取值完成后向右移动一个索引的位置（默认为１）
    　２）当步长为正数时，取正向切片：
        步长默认为１，开始索引默认为０，结束索引默认为len(s)
     3)　当步长为负整数时，取反向切片
        反向切片时。默认的起始位置为最后一个元素，终止位置是第一个元素的前一个位置

　示例：
    s = 'ABCDE'
    a = s[1:4] 　# a ----> 'BCD'
    a = s[:4]   # a ----> 'ABCD'
    a = s[2:]   # a ----> 'CDE'
    a = s[0:2]  # a ----> 'AB'
    a = s[1:1]  # a ----> ''
    a = s[3:1]  # a ----> '' 空字符串
    a = s[::2]  # a ----> 'ACE'
    a = s[2::2] # a ----> 'CE'
    a = s[::-1] # a ----> 'EDCBA'
    a = s[3::-2]# a ----> 'DB'


练习：
１、输入一个字符串，打印如下内容：
    １）打印这个字符串的第一个字符
    ２）打印这个字符串的最后一个字符
    ３）如果这个字符串长度是奇数，打印中间这个字符（注：求字符串的长度的函数len(s))

２、输入任意一个字符串，判断这个字符串是否是回文。
    回文指中心对称的文字
    如：abcba  abcdcba
    上海自来水来自海上
    ABCCBA

python3中常用的序列函数：
    len(seq)    返回序列的长度
    max(x)      返回序列的最大值元素
    min(x)      返回序列的最小值元素

字符串编码转换函数
    ord(c)      返回一个字符串的Unicode编码值
    chr(i)      返回i这个值所对应的字符

示例：
    print(ord('A'))　　　# 65
    print(ord('中'))

练习：
　１、写一个程序，输入一段字符串，如果字符串不为空，则把第一个字符的编码打印出来
　２、写一个程序，输入一个整数值(0~65535),打印出这个数值所对应的字符 


整数转换为字符串函数
    hex(i)      将整数转换为十六进制的字符串
    oct(i)      将整数转换为八进制字符串
    bin(i)      将整数转换为二进制字符串

字符串的构造函数str
    str(obj)    将对象转换为字符串

　示例：
    s = 123
    print(str(s) + '456')   # 123456

练习：
　１、用字符串*运算符打印三角形
    要求输入一个整数，此整数代表此三角形离左侧的字节数
    如：
        $ python3 tri_angle.py
        请输入离左侧的距离：３
        则打印
        　　*
         ***
        *****
       *******
　２、输入三行文字，让这三行文字在一个方框居中显示
如输入（不要输入中文）
hello tarena!
my name is weimingze
python
显示如下：
+------------------------+
|     hello tarena       |
|  my name is weimingze  |
|        python          |
+------------------------+


将python对象变成一个json      json.sumps(obj)
>>>import json   # 导入json模块
>>>d = dict(name='Bob', age=20, score=88)
>>>json.dumps(d)
'{"age":20, "score":88, "name":"Bob"}'

把json反序列为python对象，用loads()或者对应的load()方法

>>>json_str = '{"age":20, "score":88, "name":"Bob"}'
>>>json.loads(json_str)
{'age':20, 'score':88, 'name':'Bob'}

可选参数default就是把任意一个对象变成一个可序列为JSON的对象。