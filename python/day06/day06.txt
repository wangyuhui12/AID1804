
day05 回顾：
 for 语句
    for 变量列表 in 可迭代对象:
        语句块1
    else:
        语句块2


当for语句用break结束循环时，else子句不会被执行

range 函数
 range(stop)
 range(start, stop[,step])

continue 语句
 继续下一次循环
 while 真值表达式：
    ....
 for 语句
    for x in 可迭代对象：
        ....

列表：
    []   空列表
    [1,2,3]
    list()
    list(可迭代对象)

 列表的运算：
    + += * *=
 
 列表的比较运算：
    < <= > >= == !=


day06 笔记：
列表的 in / not in
    1、判断一个数据元素是否存在于容器（列表）内，如果存在返回True,否则返回False
    2、not in 的返回值与 in运算符相反
示例：
    x = [1, 'Two', 3.14, '四']
    1 in x        # True
    2 in x        # False
    3 no in x     # True
    '四' no in x  # False

列表的索引 index / 切片 slice
    列表的索引语法：
        列表[整数表达式]
    用法：
        列表的索引取值与 字符串的索引取值规则完全相同
        列表的索引分为正向索引和反向索引

列表的索引赋值
    列表是可变的序列，可以通过索引赋值改变列表中的元素
语法：
    列表[索引] = 表达式

示例：
    x = [1, 2, 3, 4]
    x[2] = 3.14    # 改变了第三个元素的值

id 是指计算机内存的起始地址
变量绑定一个对象，当对象没有变量绑定时，对象的内存会自动销毁。
自动内存回收原理叫引用计数

列表、字典、可变集合是可变类型
字符串、数字（int、float）、元组、不可变集合(frozenset)不可变类型


列表的切片
    列表[:]
    列表的[::]
    列表的切片取值返回一个列表，规则等同于字符串的切片规则

示例：
    x = list(range(9))
    y = x[1:9:2]    # y = [1, 3, 5, 7]

列表的切片的赋值语法：
    列表[切片] = 可迭代对象
说明：
    切片赋值的赋值运算符的右侧必须是一个可迭代对象
示例：
    L = [2, 3, 4]
    L[0:1] = [1.1 ,2.2]
    print(L)    # [1.1, 2.2, 3, 4]
    L = [2, 3, 4]
    L[:]  = [7, 8]   # [7,8]

    L = [2, 3, 4]
    L[1:2] = [3.1, 3.2, 3.3]  # [2, 3, 3.1, 3.2, 3.3, 4]

    L = [2, 3, 4]
    L[1:1] = [1.1, 2.2, 3.3]   # [2, 1.1, 2.2, 3.3, 3, 4]

切片步长不为1的切片赋值：
    L = list(range(1,9))
    L[1::2] = [2.2, 4.4, 6.6, 8.8]
    print(L)

切片注意事项：
    对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提供元素的个数一定要等于切片切出的段数
    如：
        L = [1, 2, 3, 4, 5, 6]
        L[::2] = 'ABCD'   # 错的
        L[::2] = "ABC"    # 对的

del 语句用于删除列表元素
 语法：
    del 列表[索引]
    del 列表[切片]

 示例：
    L = [1, 2, 3, 4, 5, 6]
    del L[0]  # L = [2, 3, 4, 5, 6]
    del L[-1]  # L = [2, 3, 4, 5]
    L = [1,2,3,4,5,6]
    del L[::2]  # L = [2,4,6]

python3中常用的序列函数：
    len(x)      返回序列的长度
    max(x)      返回序列的最大值元素
    min(x)      返回序列中的最小值元素
    sum(x)      返回序列中的所有元素的和（元素必须是数值类型）
    any(x)      真值测试，如果列表中其中一个值为真值则返回True，否则返回False
    all(x)      真值测试，如果列表中所有值为真值，则返回True，只要有一个为假，则返回False

练习：
 1、已知有列表
    L = [3, 5]
    用索引和切片操作，将列表改为：
    L = [1,2,3,4,5,6]
    将列表反转（前后对调），然后删除最后一个元素
    print(L)   # [6, 5, 4,3,2]

2、写程序，让用户循环输入一些整数，当输入-1时结束输入，将这些整数存于列表L中
    1)打印您共输入了几个有效的数
    2）打印您输入的数的最大数是多少？
    3）打印您输入的数最小数是多少？
    4）打印您输入这些数的平均值。

python3中常用的列表方法

L.index(v [, begin[,end]])
    返回对应元素的索引下标，begin为开始索引,end为结束索引，当value不存在时触发ValueError错误
L.insert(index,obj)
    将某个元素插放到列表中指定的为止
L.count(x)
    返回列表中元素的个数
L.remove(x)
    从列表中删除第一次出现在列表中的值
L.copy()
    复制此列表（只复制一层，不会复制深层对象）
L.append(x)
    向列表中追加单个元素
L.extend(lst)
    向列表追加另一个列表
L.clear()
    清空列表，等同于L[:] = []
L.sort(reverse=False)
    将列表中的元素进行排序，默认顺序按值的小到大的顺序排列
L.reverse()
    列表的反转，用来改变原列表的先后顺序
L.pop([index])
    删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除元素的引用关系。


练习：
 写一个程序，输入多行文字，当输入空行时结束输入，将原输入的所有字符串存于列表中
 1、按原来输入的行的顺序反向打印这些行
 例如：
   输入：hello world
   输入：welcome to china
   输入：I like python
   输入：<回车>
显示

2、打印出您一共输入了多少字符？

字符串文本解析方法 split 和 join
 S.split(sep=None)
    将字符串，使用sep作为分隔符分割S字符串，返回分割后的字符串的列表，当不给定参数时，用空白字符作为分隔符进行分割
 S.join(iterable)
    用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串
 
例如：
    s = 'Beijing is capital'
    L = s.split(' ')
    # L = ['Beijing','is','capital']

    s = '\\'
    L = ['C:', 'Programe files', 'python3']
    s2 = s.join(L)
    # s2 = b'C:\Programe files\python3'

深拷贝 deep copy 和 浅拷贝 shallow copy

浅拷贝
    是指复制过程中只复制一层变量，不会复制深层变量绑定的对象的复制过程

深拷贝
    import copy
    L2 = copy.deepcopy(L1)   # 深拷贝

注意：深拷贝只对可变对象进行复制，不可变对象通常不复制
列表有时候需要深拷贝
针对不可变对象可以不拷贝

列表推导式 list comprehension
 列表推导式是用可迭代对象依次生成带有多个元素的列表的表达式
 作用：
    用简易方法生成列表
 语法：
    [表达式 for 变量 in 可迭代对象]
    或
    [表达式 for 变量 in 可迭代对象 if 真值表达式]
 示例：
    L = [x*x for x in range(1,10)]
    # L = [1,4,9,16,25,36,49,64,81]

练习：
 用列表推导式生成1~100内的奇数列表
    结果[1,3,...,99]

    L = [x for x in range(1,100) if x%2==1]

列表推导式的嵌套：
 语法：
    [ 表达式1
    for 变量1 in 可迭代对象1 if 真值表达式1
    for 变量2 in 可迭代对象2 if 真值表达式2
    ...]
 示例：
    L1 = [2, 3, 5]
    L2 = [7, 11, 13]
    # 将L1中的全部元素与L2中的全部元素依次相乘后放到列表L3中
    L3 = [x * y for x in L1 for y in L2]
    print(L3)

练习：
    1、用字符串s = 'ABC' 和 s2 = '123'
    生成如下列表：
    ['A1','A2','A3','B1','B2','B3','C1','C2','C3']

    2、有一些数存在于列表L中，如：
    L = [1, 3, 2, 1, 6, 4, ..., 98, 82]
       （此数据自己定义）
    将列表L中的数存入于另一个列表L2中（要求，重复出现多次的数字只在L2列表中保留一份）

    3、生成前40个斐波那契数（Fibonacci）
     1 1 2 3 5 8 
     要求：将这些数保存在列表中，最后打印列表中的这些数
        
