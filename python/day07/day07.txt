
day06回顾

list 列表
    in / not in 运算符
    索引取值
    索引赋值
    切片取值
    切片赋值

del 语句用于列表
    del 变量
    del 列表 [索引 / 切片]   列表中添加的是变量，用于绑定关系

序列相关的函数
    len(x)
    sum(x)
    min(x)
    max(x)   返回列表的最大值，返回的是引用关系
    any(x)   任何一个为真，则结果为真
    all(x)   所有的值全为真，返回True,否则返回False
    引用关系：可以认为是它的地址。

列表的方法：
    方法是一个对象拥有的行为。
    L.append(x)
    L.remove(x)    
    L.extend(lst)
    L.count(x)
    L.copy(lst)    
    L.clear()
    L.sort(reverse=False)
    L.index(v)
    L.insert(index,obj)  中间插入速度比较慢
    L.pop(index)
    L.reverse()   列表反转

 深拷贝 和 浅拷贝
 copy.deepycopy()
 L.copy()
 L2=L   不拷贝   绑定了同一个对象

 字符串方法：
    S.split(sep=None)

    S.join(序列)   #  '-'.join(iterable)

列表推导式：
    [表达式 for 变量 in 可迭代对象 if 真值表达式]
    表达式放在赋值语句的右边，表达式一定能够创建对象。

day07笔记：
元组 tuple
    tuple() -> empty tuple
    tuple(iterable) -> tuple initialized from iterable's items
    If the argument is a tuple, the return value is the same object.
    元组是不可改变的序列，同list一样，元组可以存放任意类型的元素，一旦元组生成，则它不可以改变。
  添加、删除、修改和查找

元组的表示方式：
    用小括号()括起来，单个元素括起来用逗号(,)区分是单个对象还是元组

创建空元组的字符值
    t = ()

创建非空元组的字面值
    t = 200,        # (200,)
    t = (20,)
    t = (1, 2, 3)
    t = 100, 200, 300    # (100,200,300)

元组的错误示例：
    t = (20)    # 20    t 绑定了整数
    x, y, z = 100, 200, 300   # 序列赋值
    x, y, z = 'ABC'        # 赋值 'A', 'B', 'C'
    x, y, z = [100, 200, 300]    # 赋值

元组的构造函数 tuple
    tuple()  生成一个空的元组，等同于()
    tuple(iterable) 用可迭代对象生成一个元组
示例：
    t = tuple()
    t = tuple(range(10))
    t = tuple('hello')
    t = tuple([1, 2, 3, 4])

元组的算术运算：
  +   +=   *   *=
    用法与列表的用法完全相同
元组的比较运算：
    < <= > >= == !=
    规则与列表完全相同

in / not in
索引取值
切片取值
    规则与列表完全相同
区别：
    元组是不可变对象，不支持索引赋值和切片赋值

元组的方法：
    见：>>> help(tuple)
    T.count(value) -> integer -- return number of occurrences of value
    T.index(value, [start, [stop]]) -> interger
    return first index of value.

可以用于序列的函数：
    len, max, min, sum, all, any
三个构造函数：
    str(obj)
    list(iterable)
    tuple(iterable)
    用于创建相应的对象

其它函数：
    reversed(seq)  返回反向顺序的可迭代对象的生成器
    sorted(iterable, reverse=False)
    返回已排序的列表

示例：
    for x in reversed("ABCD"):
        print(x)  # D C B A

    L = [8, 6, 3, 5, 7]
    L2 = sorted(iterable)   # 等同于 L3 = L.sort()
    L3 = sorted(iterable, reverse=True)   
    返回的是一个列表
    print(L3)
    print(L)   # 保持不变

字典 dict
    1、字典是一种可变的容器，可以存储任意类型的数据
    2、字典中的每个数据都是用‘键’（key）进行索引，而不像序列可以用下标来进行索引
    3、字典的数据没有先后顺序关系，字典的存储是无序的
    4、字典中的数据以键（key）-值（value）对进行映射存储
    5、字典的键不能重复，且只能用不可变类型作为字典的键。

字典的字面值表示方式：
    用{} 括号括起来，以冒号（：）分隔键-值对，各键-值对用逗号分隔开。

创建空字典
    d = {}

创建非空的字典：
    d = {'name' : 'tarena', 'age': 15}
    d = {'姓名': '小张'}
    d = {1:'壹', 2:'贰'}

字典的构造函数 dict
    dict()   创建一个空字典，等同于{}
    dict(iterable)  用可迭代对象初始化一个字典
    dict(**kwargs)  关键字传参形式生成一个字典

示例：
    d = dict()
    d = dict([('name','tarena'), ('age',15)])
    d = dict(name = 'tarena', age=15)

不可变类型
    int, float, complex, bool str, tuple, frozenset(固定集合),
    bytes(字节串)
可变类型：
    list, dict, set, bytearray(字节数组) 

字典的键索引
    用[]运算符可以获取字典内'键'所对应的'值'
        语法：
            字典[键]
    获取数据元素
        d = dict(name='tarena',age=15)
        print(d['age'])   # 15

添加/修改字典元素
    字典[键] = 表达式
示例：
    d = {}
    d['name'] = 'tarena'  # 创建一个新的键值对
    d['age'] = 15       # 创建键值对
    d['age'] = 16      #  修改键值对

del 语句删除字典的元素
 语法：
    del 字典[键]
 示例：
    d = {'name': 'china', 'pos': 'asia'}
    del d['pos']
    print(d)
    del d['name']
    print(d)   # {}

字典的 in / not in 运算符
    可以用 in 运算符来判断一个'键'是否存在于字典中，如果存在则返回True，否则返回False
    not in 与 in 返回值相反

示例：
    d = {'a': 1, 'b':2}
    'a' in d                  # True
    1 in d                    # False
    100 not in d              # True
    2 not in d                # True

字典的迭代访问：
    字典是可迭代对象，字典只能对键进行迭代访问
    d = {'name': 'tarena', '生日':(2002, 1, 1)}
    for x in d:
        print(x)
    for x in d:
        print(d[x])

可以用于字典的内建函数
    len(x)      返回字典键-值对的个数
    max(x)      返回字典的键的最大值
    min(x)      返回字典的键的最小值
    sum(x)      返回字典所有键的和
    any(x)      真值测试，只对键测试，如果其中一个键为True，结果为True
    all(x)      真值测试，全部键为True时，结果才为True

字典的方法：
    见： dict.html
    D.clear()          清空字典
    D.copy()           返回字典D的副本，只赋值一层(浅拷贝)
    D.update(D2)       将字典D2合并到D中，如果键相同，则此键的值取D2的值作为新值
    D.pop(key)         移除键，同时返回此键所对应的值
    D.get(key, default)返回key所对应的值，如果没有此键，则返回default
    D.keys()           返回可迭代的dict_keys集合对象
    D.values()         返回可迭代的dict_values值对象
    D.items()          返回可迭代的dict_items对象

练习：
 写程序，实现如下需求：
    将如下数据形成一个字典seasons
        '键'     '值'
         1        '春季有1,2,3月'
         2        '春季有4,5,6月'
         3        '春季有7,8,9月'
         4        '春季有10,11,12月'         
    让用户输入一个整数代表这个季度，打印这个季度的信息，如果用户输入的信息不在字典的键内，则打印信息不存在


练习
    写程序，输入一段字符串，打印出这个字符串中出现过的字符及出现过的次数：
        如：
        输入： ABCDABCABA
        输出：
            A ：4次
        不要求打印顺序

字典推导式
    字典推导式是用可迭代对象依次生成字典内元素的表达式

语法：
    {键表达式 ： 值表达式 for  变量 in 可迭代对象 [ if 真值表达式]}
    注： []的内容代表可省略

示例：
    d = {x : x**2 for x in range(10)}

练习：
    1.有字符串列表如下：
        L = ['tarena', 'xiaozhang', 'xiaowang']
    生成如下字典：
        d = {'tarena': 6, 'xiaozhang': 9, 'xiaowang': 8}
    注：字典的值是键的长度

    2.编号列表如下：
        Nos = [1001, 1002, 1003, 1004]
        names = ['Tom', 'Jerry', 'Spike', 'Tyke']
        生成用Nos数据为键，以names为值的字典，如下：
        {1001: 'Tom', 1002: 'Jerry', ...}


练习：
    1、写一个程序，输入一些单词和解释，将单词作为键，将解释作为值，将这些数据存入字典中
        然后：
            输入查询的单词，显示出此单词的解释

    2、学生管理项目准备工作：
        写一个程序，任意输入n个学生的信息，形成字典后存于列表中：
            学生信息包括：
                姓名(字符串)
                年龄(整数)
                成绩(整数)
            循环输入学生信息，直到输入学生姓名为空时结束输入
        最后形成字典列表如下：
            L = [
            {'name': 'xiaozhang', 'age':20, 'score':100}
            {'name': 'xiaoli', 'age':21, 'score':98}
            {'name': 'xiaowang', 'age':19, 'score':89}            
            ]
       +------- +--------+------+
       |  name  |  age   | name |
       +--------+--------+------+