
day07回顾：
元组 tuple
    字面值表示方式
    1,2,3
    (1,2,3)
    (1,)
    1,
    tuple()
    tuple(可迭代对象)

元组的运算：
    + += * *= 
    < > <= >= !=
    int / not in
    []

字典 dict
    键(key) - 值(value)
  (不可变类型) (任意类型)

散列存储：根据一定的算法将数据散列开。哈希算法。。红黑数，，二叉树

字典的字面值表示
    {}
    {1: "一", 2: '二'}
    构造(创建)函数 dict
        dict()
        dict(可迭代对象)
        dict(**kwargs)
            dict(a=1, b=2)

 访问字典：
    d = {1: "一", 2: '二'}
    v = d[1]
    修改/添加数据
    d[3] = '三'
    删除 del 语句
        del d[1]

 字典的方法：
    d.get(v, default)
    d.update(d2)
    d.keys()
    d.values()
    d.items()
    ...

 字典推导式：
    {键： 值表达式 for 变量 in 可迭代对象 if ...}

 字典 vs 列表
    1、都是可变的容器
    2、索引方式不同（列表用整数索引，字典用键索引）
    3、字典的查找速度可能快于列表（重要）
    4、列表的存储是有序的，字典的存储是无序的

day08笔记：

集合 set      散列存储  红黑存储  无序的
    集合是可变的容器
    集合内的数据对象是唯一的（不能重复多次的）
    集合是无序的存储结构，集合中的数据没有先后关系
    集合内的元素必须是不可变对象
    集合是可迭代的                                                         
    集合是相当于只有键没有值的字典（键则是集合的数据）


创建空的集合
    s = set()       #  创建一个空的集合   

创建非空集合
    s = {1, 2, 3}  # 集合中三个整数1, 2, 3

集合的构造函数 set
    set()           创建空集合
    set(iterable)   用可迭代对象创建一个新的集合对象

示例：
    s = set("ABC")
    s = set("ABCCBA")
    s = set({1:'一', 2:'二',5:'五'})
    s = set([1, 3.14, False])
    s = set((2, 3, 5, 7))

集合的运算：
    交集  并集   补集   子集   超集

 & 生成两个集合的交集
    s1 = {1, 2, 3}
    s2 = {2, 3, 4}
    s3 = s1 & s2

 | 生成两个集合的并集
    s1 = {1, 2, 3}
    s2 = {2, 3, 4}
    s1 | s2     #  {1, 2, 3, 4}
 
 - 生成两个集合的补集
    s1 = {1, 2, 3}
    s2 = {2, 3, 4}
    # 生成属于s1，但不属于s2的集合
    s1 - s2     # {1}

 ^ 生成两个集合的对称补集
    s1 = {1, 2, 3}
    s2 = {2, 3, 4}
    s1 ^ s2     # s3 = {1, 4}
    # 等同于 s3 = (s1 - s2) | (s2 - s1)

 < 判断一个集合是否是另一个集合的子集
 > 判断一个集合是否是另一个集合的超集
    s1 = {1, 2, 3}
    s2 = {2, 3}
    s2 < s1   # 判断子集
    s1 > s2   # 判断超集

 ==  != 集合相同/不同
    s1 = {1, 2, 3}
    s2 = {2, 3, 1}
    s1 == s2   # True
    s1 != s2   # False  # 集合的数据没有先后关系

 in / not in 运算符
    等同于字典，in 运算符用于集合中，当某个值存在于集合中，则为真，否则为假
    not in 与 in 返回值相反
 示例：
    s = {1, 'Two', 3.14}
    1 in s           # True
    2 in s           # False
    3.14 not in s    # False
    4 not in s       # True

python3中可用于集合的函数：
    len(x), max(x), min(x), sum(x), any(x), all(x)

集合是可迭代对象
    s = {1, 2, 3}
    for x in s:
        print(x)

练习：
    经理有：曹操， 刘备， 周瑜
    技术人员：曹操，周瑜，张飞，赵云
    用集合求：
        1、即是经理也是技术员的有谁？
        2、是经理，但不是技术员的有谁？
        3、是技术员，不是经理的都有谁？
        4、张飞是经理吗？
        5、身兼一职的人有谁？
        6、经理和技术员共有几个人？


练习：
    任意输入一个单词，存入集合中，当输入空字符串时结束输入
        1) 打印您输入的单词的种类数（去重）
        2) 每个单词都打印到终端上显示
        思考：
            如何让打印的次序和输入的次序一致

阶段总结
    
数据类型
    不可变数据类型
        bool    int     float       complex     str         tuple   frozenset   bytes
    可变类型
        list    dict    set bytearry    

函数 function
什么是函数
    函数是可以重复执行的语句块，可以重复使用
    作用：
        1、用于封装语句块，提高代码的重用性
        2、定义用户级别的函数

函数定义（创建）语句def语句的语法：
    def 函数名（形参列表）：
        语句块


说明：
    1、函数的名字就是语句块的名称
    2、函数名的命名规则与变量名相同（函数名必须为标识符）
    3、函数有子集的名字空间，在函数外部不可以访问函数内部的变量，在函数内部可以访问函数外部的变量，通常让函数处理外部数据需要用参数给函数传入一些数据
    4、函数的参数列表可以为空
    5、函数语句不能为空

函数的调用
    函数名（实际调用传递参数列表）
    注：实际调用传递参数以后称为实参

说明：
    函数调用是一个表达式
    如果没有return语句，此函数执行完毕后返回None 对象
    如果函数需要返回其它的对象需要用到return语句

练习：
    １、写一个函数myfun，此函数用来显示两个参数的相关信息
        函数：
            def myfun(a, b):
                此处自己实现
        此函数给定两个参数，打印关于两个参数的信息：
            1)　打印两个参数的最大值
            2)　打印两个参数的和
            3) 打印两个参数的乘积
            4)　打印从a开始到b结束的所有偶数：
            如：
                myfun(5, 10):

    2 猴子吃桃
        有一只小猴子，摘了很多桃子
            第１天吃了全部桃子的一半，感觉不饱又吃了一个
            第２天吃了剩下的一半，感觉不饱，又吃了一个
            ...一次类推
            到第１０天，发现只剩一个了
        请问第一天摘了多少桃子？

    ３　完全数：
        1 + 2 + 3 = 6
        

