
day08回顾：
    两个容器
        集合　set
        固定集合    frozenset
    集合的运算：
        & 交集
        | 并集
        -　补集
        ^　对称补集
        < 判断子集
        > 判断超集
        ==  !=
        >=  <=

        in / not in
 推导式
    {x for x in range(10) if x%2==1}

函数　function
    def f1():
        pass

day09　笔记：
return 语句
 语法：
    return [表达式]
    []　代表可以省略
　作用：
    用于函数中，结束当前函数的执行，返回到调用该函数的地方，同事返回一个对象的引用关系
　说明：
    １、return语句后跟的表达式可以省略，省略后相当于return None
    ２、如果函数没有return语句，则函数执行完最后一条语句后返回None（相当于在最后加了一条return None语句）
    ３、函数调用一定会返回一个对象的引用

练习：
    写一个函数mymax，　实现返回两个数的最大值：
        如：
            def mymax(a, b):
                pass
            print(mymax(100, 200))
            print(mymax(50, 10))
            print(mymax('ABC', 'ABCD'))

def mymax(a, b):
    return max(a, b)

２、写一个函数 input_number
def input_number():
    pass
　此函数用来获取用户循环输入的整数，当用户输入负数时结束输入
将用户输入数以列表形式返回，再用再建函数max，min,sum表示出用户输入的最大值，最小值及和：

函数的综合传参
    函数传参方式，在能确定形参能唯一匹配到相应实参的情况下可以任意组合

示例：
def myfun(a, b, c):
    pass
myfun(100, *[200, 300]) # 正确
myfun(*'AB', 300)    # 正确
myfun(100, c=300, b=200) #　正确
myfun(1, **{'c': 3, 'b': 2})  #　正确
myfun(**{'c':3, 'b':2}, a=1)    # 正确
myfun(b=2, c=3, 1)  # 错误

说明：
    先要位置传参，再关键字传参

练习：
　１、写一个函数sum3(a, b, c):
    用于返回三个数的和
　　写一个函数pow3(x),用于返回x 的三次方(立方)
　
    １）用以上函数计算
    1**3 + 2 ** 3 + 3**3的和

    ２）计算1+2+3的和的立方
        即(1+2+3)**3

－－－－－－－以下讲的是函数的形参（如何接收实参）－－－－－
函数的缺省参数
　语法：
def 函数名(形参名１＝默认实参１，形参名２＝默认实参２，　..):
    ...
 示例：
def info(name, age=1, address='未填写'):
    print(name, "今年", age, "岁, 家庭住址是:", address)

info('tarena', 15)
info('小魏', 20, '北京市朝阳区')
info('小李')

说明：
　１、缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则基右侧的所有参数都必须有缺省参数
如：
def test(a, b=10, c):  # 错的
    pass
　２、缺省参数可以有０个或多个，甚至全部都有缺省参数

练习：
　１、写一个函数　mysum(), 可以传入两个实参或三个实参。如果传入两个实参，则返回两个实参的和
　２、如果传入三个实参，则返回前两个实参对实参的和对第三个实参求余的结果

print(mysum(1, 100))
print(mysum(2, 10, 7))   # 5返回(2+10)%5

函数的形参定义方式：
　位置形参
　星号元组形参
　命名关键字形参
　双星号字典形参

位置形参：
　语法：
    def 函数名（形参名１，　形参名２，　...）
        语句块

星号元组形参：
　语法：
def 函数名(*元组形参名):
    语句

　作用：
    收集多合的位置传参
　说明：
    元组形参名通常用：'args'
　示例见:
    code/

练习：
　写一个函数，　mysum,可以传入任意个实参的数字，返回所有实参的和
def mysum(...):
    ....
print(mysum(1, 2, 3, 4))   # 10
print(mysum(2, 4, 6))   # 12

命名关键字形参
　语法：
    def 函数名（*,　命名关键字形参）:
        语句
    或
    def 函数名(*args, 命名关键字形参):
        语句

　作用：
    所有的参数都必须用关键字传参或字典关键字传参传递

示例见：　named_keywork_args.py

双星号字典形参：
　语法：
    def 函数名(**字典形参名):
        语句
　作用：
    收集多余的关键字传参
　说明：
    通产字典形参名设为"kwargs"
　示例见：

函数的参数说明：
    缺省参数，位置形参，星号元组形参，命名关键字形参和双星号字典形参可以混合使用

函数参数自左至右的顺序为：
    位置形参
    星号元组形参
    命名关键字形参
    双星号字典形参

综合示例：
def f1(a, b, *args, c, **kwargs):
    pass

f1(1, 2, 3, 4, d=6, c=5, e=7)

函数的不定长参数：
def fn(*args, **kwargs):
    pass

# 可以接受任意的位置传参和关键字传参

练习：
　写一个myrange函数，此函数返回一个符合range规则的整数列表
　如：
    L = myrange(3)
    print(L)
    L = myrange(3, 6)
    print(L) # L = [3, 4, 5]
    L = myrange(1, 10, 3)
    print(L)

练习：
　１、素数prime函数练习
    １）写一个函数isprime(x)  判断x是否为素数，如果是素数，返回True，否则返回False
    2)写一个函数prime_m2n(m, n),返回m 开始到ｎ结束的范围内的素数列表，
    如：
        L = prime_m2n(1, 10)
        print(L)   # [2, 3, 5, 7]
    3) 写一个函数primes(n), 返回指定范围内素数(不包含n)的全部素数的列表，并打印这些素数
    如：
        L = prime(20)
        print(L)   # [2, 3, 5, 7, 11, 13, 17, 19]
        １）打印１００以内的全部素数
        ２）打印１００以内全部素数的和

　２、修改之前的学生信息管理程序：
    编写两个函数用于封装　录入学生信息　和　打印学生信息的功能
    1)
    def input_student():
        ＃ 此函数获取学生信息，并返回学生信息的字典的列表
        ...
    ２）
    def output_student(L):
        #　以表格形式再打印学生信息
        ...
    验证测试：
        L = input_student()
        output_student(L)
        print("再添加几个学生信息")
        L += input_student()
        print("添加学生后的学生信息如下：")
        output_student(L)

