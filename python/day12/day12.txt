
day11回顾：
函数式编程
 高阶函数
    map(func, *iterable)

    def fn(x, y, z):
        pass
map(fn, range(10), range(10), range(10))

filter(func, iterable)    返回func为True的iterable

sorted(iterable, key=None, reverse=False)

s = 'aAbCcBDd'
s1 = sorted(s, key=lambda x:x.upper())


day12 笔记
装饰器 decorators(专业提高篇)

函数装饰器
 函数装饰器是指装饰的是一个函数，传入的是一个函数，返回的也是一个函数的函数(闭包)

函数装饰器的语法：
 def  装饰器函数名(参数)：
    语句块
    return 函数对象

被装饰函数的语法
@装饰器函数名
def 函数名（形参列表）：
    语句块

带有参数的装饰器及应用案例
见03_mydeco3.py

函数的文档字符串
 函数内部，第一个没有赋值给任何变量的字符串为文档字符串
 语法：
    def 函数名（形参列表）：
        '''函数的文档字符串'''
        函数语句块
 示例：
def cba():
    '这是一块文档字符串'
    pass

help(cba)

函数的__doc__属性
 __doc__属性用于绑定该函数的文档字符串

示例：
def fx(a, b):
    '''这是函数的文档字符串
    这是第二行...
    '''
print(fx.__doc__)

函数的__name__属性：
    __name__属性用于绑定函数名的字符串
示例：
def fx():
    pass
f1 = fx
print(f1.__name__)


函数定义语句(def语句的语法)
[@装饰器名１]
[@装饰器名２]
[@装饰器名３]
....
def 函数名([位置形参], [*[元组形参名]], [命名关键字形参], [**字典形参]):
    '''文档字符串'''
    语句块

面试题
L = [1, 2, 3]
def f(n, lst=[]):
    lst.append(n)
    print(lst)

f(4, L)　　# [1, 2, 3, 4]
f(5, L)  # [1, 2, 3, 4, 5]
f(100)   # [100]
f(200)  # [100, 200]

说明：
    默认参数(缺省参数)绑定在函数对象内部，且随函数的生命一直存在

解决办法：
L = [1, 2, 3]
def f(n, lst=None):
    if lst is None:
        lst = []
    lst.append(n)
    print(lst)

f(4, L)　　# [1, 2, 3, 4]
f(5, L)  # [1, 2, 3, 4, 5]
f(100)   # [100]
f(200)  # [100, 200]

from functools import reduce
reduce(function, sequence)
　取出列表的头两个元素，然后将他们传入函数，获得下一个　单一的值。
>>> b = reduce((lambda x,y:10*x+y), [1, 3, 5, 7, 9])
>>> b
13579

>>> s = reduce((lambda x,y:x+y), ['a', 'b', 'c', 'd'])
>>> s
'abcd'

>>> b = reduce((lambda x, y:x*y), [1, 2, 3], [1, 2, 3])
>>> b
[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]

>>> b = reduce((lambda x, y:x*y), [1, 2, 3], [1, 2])
>>> b
[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]

当reduce传入三个参数时，第二个元素作为可迭代对象



多人写一个程序的时候该怎么做？


模块 Module
什么是模块：
　１、模块是一个包含有一些列数据、函数、类等组成的程序组
　２、模块是一个文件，模块文件名通常以.py结尾

作用：
　让一些相关的数据、函数、类等有逻辑的组织在一起，使逻辑结构更加清晰
　模块中的数据、函数和类等可提供给其他模块或程序使用

模块的分类：
    １、内置模块(builtins):在解析器内部可以直接使用
    ２、标准库模块：安装python时已安装且可直接使用
　　　　３、第三方模块（通常为开源），需要自己安装
　　　　４、用户自己的模块（可以作为其他人的第三方模块）

模块的导入语句

import 语句
语法：
 import 模块名１[as 模块新名１][,模块名２　as 模块新名２],...

示例：
＃导入数学模块
import math
＃导入系统模块sys和os模块
import sys, os

作用：
　将某模块整体导入到当前模块
用法：
　模块.属性名

dir(obj)  函数返回模块所有属性的字符串列表
help(obj) 可以查看模块相关的文档字符串

练习：
　１、输入一个正方形的周长，输出正方形的面积
　２、输入一个圆的半径，打印出这个圆的面积
　３、输入一个正方形的面积，打印这个正方形的周长
　（要求：用math模块内的函数和变量）



练习：
    １、写一个程序，以电子时钟格式打印时间：
        时间格式为：
            HH:MM:SS
        时间每隔一秒刷新一次

    ２、编写一个闹钟程序，启动时设置定时时间，到时候后打印出一句话，然后程序退出

    ３、把学生管理系统划分为模块（把相关操作放在一个模块内）：
    建议：
        main.py放主事件循环
        menu.py放show_menu函数
        student_info.py放学生信息相关的操作

    ３、请编写函数fun，其功能是计算下列多项式的和
    sn = 1 + 1/1! + 2/2! + 3/3! + ... + n/n!
    计算n为100时的值
    看一下求出来的和是什么？建议用math.factorial