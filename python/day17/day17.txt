
day16回顾：
文件 file
  文件的操作有两种：
    读　　'r'
    写   'w', 'x', 'a'
  f = open(文件路径，　打开模式）

文件的操作分三步：
    打开文件
    读/写操作
    关闭文件

文件的读/写操作模式：
  文本文件  't' (要求文件内只存文字数据)
  二进制文件 'b'

打开文件函数 open()  返回的是文件流对象

文件流对象的方法：
    F.read
    F.readline
    F.write
    F.writelines
    F.close()
    F.flush()  清空缓冲区（缓冲区的概念）
    二进制文件读写操作
    F.tell()   得到文件的当前读写位置
    F.seek(offset, whence)   设置读写位置

sys.stdin(键盘输入)
sys.stdout(标准输出)
sys.stderr(标准错误输出)

汉字编码：
 GB系列编码（国标）
    gb18030
    gbk
    gb2312
 UNICODE 系列编码　
    unicode 16
    unicode 32  (bit)
    (utf-8)

编码注释：
#-*- coding:utf-8 -*-



day17　笔记：
面向对象编程
　object(对象)

什么是对象：
　对象是指现实中的物体或实体

什么是面向对象
　把一切看成对象(实例),让对象和对象之间建立关联关系

对象都有什么特征
　对象有很多属性（名词）　（变量描述属性）
    姓名、性别、年龄、
　对象有很多行为（动作、动词）　（函数描述行为，方法method）
    学习、吃饭、睡觉、踢球、工作

什么是类(class)：
    拥有相同属性和行为的对象分为一组，即为一个类
    类是用来描述对象的工具，用类可以创建同类对象

类的创建语句：
　语法：
    class 类名(继承列表):
        '''类的文档字符串'''
        实例方法定义(类内的函数称为方法method)
        类变量定义
        类方法定义
        静态方法定义
作用：
    创建一个类
    用于描述此类对象的行为和属性
    类用于创建此类的一个或多个对象（实例）

示例：
class Dog():
 pass
见01_class.py

类　和　对象

 类              对象              实例
class           object          instance

构造函数
　表达式：
    类名([创建传参列表])
  作用：
    创建这个类的实例对象，并返回此实例对象的引用关系

实例(对象说明)
  实例有自己的作用域和名字空间，可以为该实例添加实例变量（属性）
  实例可以调用类方法和实例方法
  实例可以访问类变量和实例变量
示例：
claee Dog(object):
    pass

dog1 = Dog()

实例方法：
语法：
　class 类名(继承列表):
    def 实例方法名(self, 参数１，参数２,...):
        ''' 实例方法的文档字符串'''
        语句块

　作用：
     用于描述一个对象的行为，让此类型的全部对象都拥有相同的行为
  说明：
  　　实例方法实质是函数，是定义在类内的函数
     实例方法至少有一个形参，第一个形参代表调用这个方法的实例，一般命名为'self'

 实例方法的调用语法：
    实例.实例方法名（调用参数）
    或
    #     return self.obj
    类名.实例方法名（实例，调用传参）


示例见：
    02_instance_method.py


属性 attribute　（也加实例变量）
　每个实例都可以有自己的变量，此变量称为实例变量（也叫属性）

属性的使用语法：
 实例.属性名

赋值规则：
　首次为属性赋值则创建此属性
　再次为属性赋值则必变属性的绑定关系
作用：
  用来记录对象自身的数据
示例见：
    03_attribute.py

实例方法和实例变量（属性）结合在一起用：
见：
　04_dogs.py

练习：
　定义一个学生类：
    class Student():
        def set_info(self, name, age):
            '''此方法用来给学生添加'姓名'和'年龄'属性'''

        def show_info(self):
            '''此处显示此学生的信息'''

    如：
    　s1 = Student()
      s1.set_info('小张', 20)
      s2.Student()
      s2.set_info('小李', 18)
      s1.show_info()   # 小张　今年　２０岁
      s2.show_info()   # 小李　今年　　１８岁

删除属性
　用del语句可以删除一个对象的实例变量

语法：
　del 对象.实例变量名
示例：
    class Cat:
        pass

    c1 = Cat()  # 创建变量
    c1.color = '白色'  # 添加属性
    print(c1.color)
    del c1.color     # 属性错误
    print(c1.color)  # 属性错误

初始化方法：
作用：
　对新创建的对象添加实例变量(属性)或相应的资源
语法格式：
　class 类名(继承列表):
    def __init__(self, [,形参列表]):
        语句块
说明：
  初始化方法名必须为 __init__  不可改变
  初始化方法会在构造函数创建实例后自动调用，且将实例自身通过第一个参数self传入__init__方法
  构造函数的实参将通过__init__方法的形参列表传入__init__方法中
  初始化方法内部如果需要返回则只能返回None
示例：
  04_init_method.py


练习：
　１）修改之前的Student类，为该类添加初始化方法，实现在创建对象时设置“姓名“，年龄，成绩属性
  ２）添加set_score方法能为对象修改成绩信息
  ３）添加show_info 方法打印学生对象信息

析构方法：
语法：
　class 类名(继承列表):
    def __del__(self):
        语句块

说明：
　析构方法在对象销毁时被自动调用
作用：
　清理此对象所占用的资源
python不建议在析构方法内做任何事情，因为对象销毁时间难以确定

预置实例属性：
　__dict__ 属性
    此属性绑定一个存储此实例自身变量的字典















