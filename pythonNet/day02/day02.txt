


recv()特性
 1、如果连接双方断开连接，则recv会立即结束阻塞返回空字符串
 2、当接受缓冲区为空的时候会阻塞
 3、如果recv一次接受不完缓冲区内容，下一次会继续接受(TCP承诺，保证接受的完整性)

send() 特性
1、如果一端不存在，另一端还在试图send操作时会产生BrokenPipeError异常
2、当发送缓冲区满的时候会阻塞


文件读写缓冲区的作用：
    减少和磁盘的交互作用
网络收发缓冲区
 网络缓冲区：
    1、协调发送接受的速度
    2、降低发送次数

* 发送和接受消息均先放到缓冲区中，再进行处理
即 recv 和 send 实际是从缓冲区接受内容，向缓冲区发送消息

tcp粘包

产生原因：
    tcp传输中以字节流的方式发送内容，发送 消息之间没有明显的边界，此时如果发送和接受速度不匹配就会产生粘包。

影响：
    如果每次发送的内容表示一个独立的意思，此时可能需要处理粘包。如果发送的内容本身就是一个连续的整体，此时不需要处理粘包。

如何处理：
    1、每次发送之后加一个结尾标
    2、发送一个数据结构
    3、每次发送中间有一个短暂的延迟

基于udp的服务端
1、创建套接字 ----> 数据报套接字
  sockfd = socket(AF_INET,SOCK_DGRAM)

2、绑定服务端地址
    sockfd = bind(('地址','端口号'))

3、消息收发
    data, addr = revfrom(buffersize)
    功能： 接受udp消息
    参数： 每次最多接受消息的大小 字节
    返回值： 接收到的内容 bytes 
    addr    接收到的消息的发送者

    * recvfrom 一次接受一个数据包， 如果数据包超出了一次能够接受的大小则会丢失没有收到的内容。

    sendto(data, addr)
    功能： udp发送消息
    参数： data    要发送的内容  bytes
          addr    消息要发送给谁
    返回值：　发送的字节   

4、关闭套接字
    sockfd.close()

cookie:
sys.argv  属性
功能：　获取来自命令行的参数，形成一个列表
argv[0] 是命令本身　其他内容默认以空格分割放到列表中

tcp流式套接字和udp数据报套接字使用区别

1、流式套接字采用字节流的方式传输，而数据报套接字以数据报形式传输
2、tcp会产生粘包现象， udp不会
3、tcp编程保证传输的可靠性， udp则不保证
4、tcp需要listen accept, udp不需要
5、tcp使用recv send进行消息收发，udp使用recvfrom和sendto

补充：
 sendall() 
 功能参数： 同send一样
 返回值： 发送成功返回None  发送失败返回异常

 套接字对象
 (s表示一个套接字对象)

 s.fileno()
 功能： 获取套接字的文件描述符
 文件描述符：每一个IO 事件操作系统都会分配一个不同的正数与之匹配，该正数即为此IO操作的文件描述符

 sys.stdin      0
 sys.stdout     1
 sys.stderr     2

 s.type : 获取套接字类型
 s.family: 地址类型

 s.getsockname()
 功能： 获取套接字绑定的地址

 s.getpeername()
 功能： 用户连接套接字，获取连接端的地址

 s.setsockopt(level, optname, value)
 功能：  设置套接字选项
 作用： 丰富修改原有套接字功能
 参数：
    level :  设置选项的类型
            IPPROTP_TCP  IPPROTO_IP
            SOL_SOCKET
    optname: 选项类型中的子选项

    value : 为选定的选项设置值

s.getsocket(level, optname)
 功能：  获取套接字选项
 作用： 丰富修改原有套接字功能
 参数：
    level :  获取选项的类型
            IPPROTP_TCP  IPPROTO_IP
            SOL_SOCKET
    optname: 选项类型中的子选项

 返回值： 获取到的值

 udp套接字应用之广播

 一点发送多点接收
 目标地址： 广播地址  一个网段内最大的地址
 176.17.112.255

 cookie:
 format()
 功能： 字符串属性函数 用来组合字符串

 广播用量：占用大量的带宽造成网络阻塞

 tcp应用之 http传输
 
 HTTP协议 ---> 超文本传输协议
 用途： 
  1、编写基于http协议的数据传输程序
  2、网站中浏览器端获取网页的过程

作用：
  将想要获取的内容，以http协议的格式发送给服务端，服务端根据格式进行解析获取到真实需求，将结果以http协议的格式回复给客户端。

特点：
 1、应用层协议传输层使用tcp服务
 2、简单、灵活，和多种语言对接方便
 3、无状态的协议，即不记录用户使用过程中传递的内容
 4、http1.1 支持持久连接

 http请求 (Request)
请求格式：
 1、请求行   具体的请求类别
   GET      /       HTTP/1.1
   请求种类  请求内容  协议版本

 2、请求头   对请求信息的具体描述
 Accept:
 Accept-Language:
 Connection: 
 以键值对的格式对信息进行具体描述

 3、空行
 4、请求体   具体的请求参数或者提交内容

 请求类型：
 GET        获取网络资源
 POST       提交一定的附加数据，得到返回结果
 HEAD       获取响应头
 PUT        更新服务器资源
 DELETE     删除服务器资源
 CONNECT    
 TRACE      用于测试
 OPTIONS    获取服务端性能

 http响应 (Response)

 响应格式：

 响应行：  反馈具体的响应情况
 HTTP/1.1  200     OK
 版本     响应码    附加信息

 响应头：  对响应的具体描述
 Accept - Ranges : bytes
 以键值对方式给出响应信息的具体描述

 空行
 响应体：  将客户想要的内容进行返回

 响应码种类：
 1xx    提示信息， 表示请求已经接受
 2xx    表示响应成功
 3xx    响应需要重定向
 4xx    表示客户端错误
 5xx    服务端错误

 200 响应成功
 404 请求内容不存在
 401 没有访问权限
 500 服务器发生未知错误
 503 服务器暂时不能执行

要求： 什么是http协议
    请求格式和每部分的功能
    响应格式和每部分功能
    Http请求和响应的流程 

作业：通过流式套接字完成一个文件的发送，将一个文件从客户端发送给服务端或者从服务端发送给我客户端均可
