
前倾回顾
进程对象　p　属性
p.name  进程名称
p.pid   进程PID
p.daemon　　父进程的退出影响子进程

自定义进程类　　　继承 Process 　重写run

进程池 大量的事件需要频繁创建删除进程的情况
        Pool()　　　生成进程池对象
        apply_async()　　添加事件
        close()         关闭进程池
        join()          回收进程池

管道：　Pipe ----> fd1  fd2
消息队列：　　Queue ---> q


********************************
信号
　　一个进程向另一个进程通过信号传递某种讯息。接收方在接受到信号时进行相应的处理。

kill -l   查看信号
kill -signame PID   给PID的进程发送一个信号

关于信号

信号名称　： 系统定义，  名字或者数字
信号含义 ： 系统定义，  信号的作用
默认处理方法 ： 当一个进程接受到信号时默认产生的效果
            终止进程   暂停进程    忽略

e.g.
SIGHUP          连接断开
SIGINT          CTRL + C
SIGQUIT         CTRL + \
SIGKILL         终止进程且不能被处理
SIGSTOP         暂停进程且不能被处理
SIGALRM         时钟信号
SIGCHLD         子进程状态改变给父进程发送

python 进行信号处理

os.kill(pid, sig)
功能 ：发送信号给某个进程
参数　：　pid    给哪个进程发送信号
    　　　sig    要发送什么信号　　　

signal.alarm(sec)
功能：　一定时间后向自身发送一个　SIGALRM
参数：　定时时间

*　在一个进程中只允许有一个时钟，　设置第二个的时候时间就会重置

程序执行的　异步和同步
同步：按照步骤一步一步往下顺序执行
异步：在程序执行中利用内核，不影响应用层的持续执行

*　信号是唯一的异步通信方式

signal.pause()
功能：阻塞等待进程收到一个信号

signal.signal(signum, handler)
功能：　处理信号
参数：
    signum : 要处理的信号
    handler:    信号的处理方法
    可选值　：　　 SIG_DFL　　表示使用默认方法处理
                SIG_IGN 表示忽略这个信号
              func 自定义函数

自定义函数格式：　　def func(sig, frame)
                sig : 接收到的信号
                frame : 信号结构对象

* signal 函数是一个异步处理函数
* signal 函数不能处理SIGKILL，　SIGSTOP信号
* 在父进程中加上　signal (SIGCHLD, SIG_IGN)，当子进程退出时会自动交由系统处理



信号量
    给定一定的数量，对多个进程可见，并且多个进程根据信号的数量多少确定不同的行为

multiprocessing ---> Semaphore()

sem = Semaphore(num)
功能：　生成信号量对象
参数：　信号量的初始值
返回值：　信号量对象

sem.acquire()  
    将信号量数量减一　信号量为零时会阻塞
sem.release()
    将信号量数量加一　
sem.get_value()
    获取当前信号量的值


同步互斥机制
    
目的：　对共有资源操作产生的争夺

临界资源：　多个进程或者线程都能够操作的资源
临界区　：操作临界资源的代码段

同步 ： 同步是一种合作关