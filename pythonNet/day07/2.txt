系， 为完成某个任务多进程或者多线程之间形成一种协调，按照约定或条件依次执行操作临界资源，相互告知资源使用情况。

互斥 ： 互斥是一种制约关系，当一个进程或者线程进入临界区会进行加锁的操作，此时其他进程(线程)再企图使用临界资源时就会阻塞，直到资源被释放才能使用。

进程中同步互斥方法
Event  事件

multiprocessing Event
创建事件对象
e = Event() 

事件阻塞
e.wait([,timeout])

事件设置  e处于设置状态， e.wait()不再阻塞
e.set()

事件清除    e处于未设置状态， e.wait()阻塞
e.clear()

事件判断    判断e的当前状态
e.is_set()


锁 Lock

multiprocessing ---> Lock

创建对象
lock = Lock()

lock.acquire()  上锁
lock.release()  解锁

上锁状态： 此时执行acquire() 操作会阻塞
解锁状态： 执行acquire()操作为非阻塞

with lock:   --> 上锁
    ....
    ...
       ------> with代码段结束后自动解锁


线程
 什么是线程
 线程也是一种多任务编程方式，可以使用计算机的多核资源。线程被称为轻量级的进程

线程的特征
 * 线程是计算机多核分配的最小单元
 * 一个进程可以包含多个线程
 * 线程也是一个运行过程，也要消耗计算机资源。多个线程共享进程的资源和空间
 * 线程也拥有自己特有的资源属性， 比如指令集， TID等
 * 线程无论是创建删除还是运行消耗的资源都小于进程

 threading 模块创建线程

threading.Thread()
功能： 创建线程对象
参数：　name :  线程名称　　默认为　Thread-1
      target : 传入线程函数
      args  元组　　　　给线程函数位置传参
      kwargs 字典　　　给线程函数键值传参
返回：　线程对象

t.start()    启动线程
ｔ.join([timeout])    回收线程

* 多个线程之间并行执行，执行上互不干扰

线程对象的属性
t.is_alive()  查看线程的状态
t.name        线程的名称
t.setName()     设置线程名称
threading.currentThread()  获取当前线程对象

t.daemon 属性

默认情况下主线程的结束不会影响到分支线程的执行
如果设置为True　则主线程退出分支线程也会退出

设置方法
t.daemon = True
t.setDaemon(True)

判断daemon属性：
t.isDaemon()

*线程属性的设置在start前
*　一般设置daemn后不会再使用join


创建自己的线程类

步骤：　
１、继承 Thread类
２、运行Thread类中的__init__方法以获取父类原有属性
３、重写run方法

作业：　
１、复习网络编程
２、司机和售票员的故事
    　* 创建父子进程分别表示司机和售票员
    　* 当售票员捕捉到SIGINT信号，　给司机发送SIGUSER1信号，此时司机打印“老司机开车了”
    　* 当售票员捕捉到SIGQUIT信号，　给司机发送SIGUSER2信号，此时司机打印：“车速有点快，系好安全带”
    　* 当司机捕捉到SIGTSTP信号，给售票员发送SIGUSER1,此时售票员打印"到站了，请下车"
    　* 到站后，　售票员先下车（子进程先退出），　然后司机下车