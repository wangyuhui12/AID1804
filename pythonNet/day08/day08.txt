
线程间通信

　　通信方法　：　多个线程公用进程空间，　所有进程的全局量对进程内的线程均可见。因此线程间没有特有的通信方式，往往使用全局变量通信。

  注意事项：　线程间使用全局变量通信往往需要同步互斥机制作为通信的安全保证

线程的同步和互斥

线程 event 对象

创建对象　：
    e = threading.Event()
    e.wait([timeout])  如果e 为设置状态则不会阻塞，未设置则阻塞
    e.set()  将e变为设置状态
    e.clear()  将e 的设置去除

线程锁
    lock = threading.Lock()  创建线程锁对象
    lock.acquire()  上锁
    lock.release()  解锁

* 在一个进程中对一个线程锁重复上锁则会阻塞

python线程的GIL问题(全局解释器锁)

python ----》 支持多线程 ----> 同步互斥 ---> 加锁 ---> 超级锁，给解释器加锁


后果 ： 一个解释器，同一时刻只能解释一个线程。　因此大大降低了Python线程的执行效率

python 的GIL问题　解决方法

* 尽量使用进程方式并行
* 不使用C作为解释器　　C# java
* python线程适用于高延迟的IO操作，　网络操作。　不适合用cpu密集型程序。
  线程在遇到IO阻塞时会让出解释器和cpu

效率测试
分别测试　在 IO密集型程序　和CPU密集型程序下，多进程、多线程、单进程执行效率

Line CPU 6.6325037479400635
Thread CPU: 7.016927003860474
Process CPU: 3.291229248046875


Line CPU 4.205253601074219
Thread io: 3.453808307647705
Process io: 3.2371866703033447

进程和线程的区别和联系
　１、两者都是多任务编程的方式，都能够使用计算机多核
　２、进程的创建和删除要比线程消耗更多计算机资源
　３、进程空间独立，　数据安全性好，有专门的进程间通信方法
　４、线程使用全局变量通信，更加简单，但是往往要与同步互斥机制共用
　５、一个进程可以包含多个线程，线程共享进程的资源空间
　６、进程　线程都有自己特有的资源，　如命令、属性　id等

使用场景：
　 * 需要创建较多的并发任务比较简单时，　线程比较合适
　　* 如果程序数据资源比较复杂，　特别是共享资源较多时，需要考虑到线程锁的复杂性
　　* 如果多个任务无必要的关联性，不易将其强行融入到一个进程中
　　* python线程不适合cpu密集型程序

总结：　
　　１、进程线程的区别和关系
　　２、进程间以什么方式通信有什么特点
　　３、同步互斥的意义，　有什么方法实现同步互斥
　　４、僵尸进程，　进程状态，线程GIL的概念
　　５、给一个情景，问选择进程还是线程，　怎么做为什么

服务器模型

硬件服务器　：　主机　　集群　　
厂商　：　IBM     HP  联想　　　　浪潮

软件服务器　：　编写的服务端程序，　依托于硬件服务器运行，提供给用户一定的软件服务

分类　：webserver  ----> 网络后端程序提供网络请求的后端处理和数据交互
    httpserver ----> 处理http请求，回复http响应
    邮箱服务器  -----> 提供邮箱服务
    文件服务器  -----> 提供文件的上传下载

功能： 网络连接、逻辑处理、数据交互、数据传输、协议实现

模型结构 ： c/s (客户端服务器模型)
          b/s (浏览器服务器模型)

服务器目标： 
    处理速度快
    数据更安全
    并发量大

硬件 ：更高的配置， 继承分布的技术， 更好的网络速度，更多的主机，网络安全

软件 ： 程序占有更少的计算机资源， 更稳定的运行效果， 更流畅的运行速度，采用更合理的技术处理更高的并发


服务器模型

循环服务器 ： 单进程程序， 循环的接受客户端的请求，处理请求，之后每处理完一个请求后再去接受处理下一个请求。

 优点： 实现简单，占用系统资源少
 缺点： 无法同时连接多个客户端，当一个客户端长期占有服务器时，会形成其他客户端无法访问的情况
 适用情况： 任务比较短暂 ，udp套接字更适合循环

并发服务器 ： 同时能够处理多个客户端的任务请求。
  并发可分为IO并发或者多进程多线程并发。   

  IO并发： IO多路复用   协程
    优点： 资源消耗少，适用于IO类型服务器
    缺点： 不能监控cpu密集型情况，单线程， 不能长期阻塞在消息的收发

  进程/线程并发：为每个客户端单独提供一个进程线程，处理客户端请求
    优点： 客户端可以长期占用服务器
    缺点： 消耗系统资源较多

多进程并发模型

使用 fork 完成并发

1、创建套接字 绑定 监听
2、等待接受客户端请求 accept
3、创建子进程处理客户端请求， 父进程继续准备接受其他客户端连接
4、客户端退出则子进程结束


tftp文件服务器

项目功能：
* 客户端有简单的页面命令提示
* 功能包含：
    1、查看服务端文件库文件列表
    2、下载其中的某个文件到本地
    3、将本地文件上传到服务器文件库中
    4、退出
* 服务端需要：
    1、处理客户端的各种请求
    2、允许多个客户端同时进行操作


技术分析：
    tcp套接字
    并发 ---》 多进程
    对文件的读写发送操作
    查看文件列表时需要考虑粘包问题

整体结构 ： 功能封装在类中(上传， 下载， 查看文件列表)

         流程控制使用main() 创建套接字， 创建连接创建进程
         接受请求


作业： 完成 get 和 put 功能